#!/bin/bash

export FZF_DEFAULT_COMMAND='rg --files --follow --no-ignore-vcs --hidden'
export FZF_DEFAULT_OPTS="--bind 'change:top,page-up:preview-page-up,page-down:preview-page-down,CTRL-W:toggle-preview-wrap,ctrl-A:toggle-preview' --preview-window hidden --preview ' [[ -f {} ]] && bat -n --color=always {}'"

# vim-fzf [path] starts a file search and the selected file in vim.
#
# If the path is omitted then the it searches in the current directory. 
#
# It uses the FZF_DEFAULT_COMMAND to search files and shows the first
# 300 lines as preview. The preview can be hidden/shown with Ctrl-a.
# 
# If the path is omitted and the current directory is empty vim-fzf does
# nothing.
vim-fzf() {
  local file
  file=$(fzf \
         --exit-0 \
         --reverse \
         --cycle \
         --height 100% \
         --bind='CTRL-A:toggle-preview' \
         --preview-window='right:60%' \
         --preview='head -n 300 | bat -n --color=always {}'
        )
  [[ -n "$file" ]] && ${EDITOR:-vim} "$file"
}
bind -x '"\C-p": "vim-fzf"'

# fd-fzf starts a directory search and cd's into the selected directory.
#
# It uses fd to walk find all directories under the current one ($PWD)
# and shows a preview of the directory. If the directory is a git repository
# fd-fzf shows the commit message of the first commit and a list of the
# subsequent commits. Otherwise, fd-fzf lists the directory using exa.
#
# If the current directory does not have sub-directories fd-fzf does nothing.
fd-fzf() {
   local dir
   dir=$(fd --follow --type d -F "" \
         | fzf \
           --exit-0 \
           --reverse \
           --cycle \
           --height 100% \
           --bind='CTRL-A:toggle-preview' \
           --preview-window='right:50%' \
           --preview='[[ $(isgit {}) != "" ]] && git -C {} log -n 1 --color=always && echo "" && git -C {} log --color=always --pretty=format:"%C(auto) %h %Creset %cs  %s" --skip=1 || exa -hHl -L 1 --tree --color always --group-directories-first {}'
         ) && cd "$dir" 
}

# ff fuzzy-finds all files interactively that contain search string.
#
# usage: ff [string]
#
# It starts a fzf instance that starts a search whenever the query
# string changes. For a selected file it shows the matches + some
# additional lines as context in the the preview window.
#
# If a search string is specified the initial search will only look
# for files that contain the given string.
#
# If the fzf query string is empty then ff will clear the previous 
# search.
ff() {
   local file init_cmd
   if [ ! "$#" -gt 0 ]; then
      init_cmd="true"
   else
      init_cmd="rg --hidden --follow --files-with-matches --no-messages -F $1"
   fi
   file=$($init_cmd | \
          fzf \
          --query="$1" \
          --phony \
          --reverse \
          --cycle \
          --height 100% \
          --bind='CTRL-A:toggle-preview' \
          --bind='change:reload([[ -n {q} ]] && rg --hidden --follow --files-with-matches --no-messages -F {q} || true)+top' \
          --preview-window='right:60%' \
          --preview '[[ -f {} ]] && rg --ignore-case --pretty --context 10 -F {q} {} | bat --style=snip --color always'
         )
    [[ -n "$file" ]] && ${EDITOR:-vim} "$file"
}
bind -x '"\C-f": "ff"'

# cd behaves like the bash builtin cd command when an directory is
# specified and opens an inline fzf directory search otherwise.
#
# The fzf instance shows all first-level sub-directories.
# With → (right-arrow) the fzf switches into the selected
# sub-direcory S and reloads the selection area with the
# sub-directories of S.

# The fzf walks one directory-level backwards when the ← (left-arrow)
# is encountered.

# The ALT-d key restarts the fzf instance from the top-level
# directory.
function cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi
    local dir=$(fd --maxdepth=1 --type d --hidden | \
                fzf \
                --reverse \
                --tac \
                --cycle \
                --height 40% \
                --bind='CTRL-A:toggle-preview' \
                --bind='ALT-D:reload(fd --maxdepth=1 --type d --hidden)' \
                --bind='right:reload(fd --maxdepth=1 --type d --hidden "." {})' \
                --bind='left:reload(dirname {} | xargs -r dirname | xargs -r fd --maxdepth=1 --type d --hidden ".")' \
                --preview-window='right:65%:hidden' \
                --preview 'exa -hHla -L 1 --color=always --group-directories-first {}'
               )
    [[ ${#dir} != 0 ]] || return 0
    cd "$dir"
}
bind -x '"\ed": "cd"' # bind: ALT-d

# fd-git behaves like fd-fzf but filters for directories that are git
# repositories. Since it only searches for git repositories fd-git
# always shows the commit message of the first commit and a list of
# the subsequent commits as preview.
fd-git() {
   local dir
   dir=$(fd --follow --type d "." "$HOME" | isgit | sort \
         | fzf \
           --exit-0 \
           --reverse \
           --cycle \
           --height 100% \
           --bind='CTRL-A:toggle-preview' \
           --preview-window='right:60%' \
           --preview 'git -C {} log -n 1 --color=always && echo "" && git -C {} log --color=always --pretty=format:"%C(auto) %h %Creset %cs  %s" --skip=1'
         ) && cd "$dir"
}
bind -x '"\C-s": "fd-git"'

bind -x '"\C-x\C-p": "vim-git"'
bind -x '"\C-x\C-s": "git-show"'
bind -x '"\C-x\C-d": "git-diff"'
bind -x '"\C-x\C-b": "git-blame"'
bind -x '"\C-x\C-o": "git-branch"'
bind -x '"\C-x\C-r": "git-review"'
